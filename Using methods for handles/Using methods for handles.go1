// // Method 3: Using the context Package
// // For passing request-scoped data, Go‚Äôs context package offers a standardized way
// // to transport data across API boundaries and between processes.
// // –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–ø—Ä–æ—Å–∞, context (–ø–∞–∫–µ—Ç Go) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
// // –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã API –∏ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
// func yourHandler(w http.ResponseWriter, r *http.Request) {
// 	ctx := r.Context()
// 	value := ctx.Value("yourKey").(YourType) // Type assertion
// 	fmt.Fprintf(w, "Value from context: %+v", value)
// }

// func main() {
// 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
// 		ctx := context.WithValue(r.Context(), "yourKey", YourValue)
// 		r = r.WithContext(ctx)
// 		yourHandler(w, r)
// 	})
// 	http.ListenAndServe(":8080", nil)
// }
//
//*// Method 3

// Methods 1 & 2
package main

import (
	"fmt"
	"net/http"
)

// **// Method 2: Structs Implementing http.Handler
// Another approach is defining a struct that includes the dependencies as fields
// and then implementing the ServeHTTP method on this struct.
// –î—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ (=–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏) —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,
// –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
// (–¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø –∏–ª–∏ –µ–≥–æ –ø–æ–ª—è),
// –∞ –∑–∞—Ç–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞ ServeHTTP (—ç—Ç–æ –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Handler) –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
//
// –í–æ–æ–±—â–µ (–ø–æ–∫–∞ —Å–ø–æ—Ä–Ω–æ):
// —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–ª–∞—Å—å —Ä—É—á–∫–æ–π (handler), –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ ServeHTTP()
// —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π:
// ServeHTTP(w http.ResponseWriter, r *http.Request)
// üìå
type App struct {
	Logger *Logger
}

func (app *App) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	app.Logger.Log("Received a request")
	fmt.Fprintln(w, "Request logged(–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω) successfully(—É—Å–ø–µ—à–Ω–æ)")
}

//*// Method 2

//**// Method 1: Using Closure
// to Capture External Variables
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è (–∞ –ø–æ —Å—É—Ç–∏ —Ä—É—á–∫—É –¥–µ–ª–∞–µ–º –º–µ—Ç–æ–¥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Env)
// –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
// (—Å–µ—Ä–≤–∏—Å Env —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é ‚ùó"—Å–æ—Å—Ç–æ—è–Ω–∏—è"‚ùó –∫–ª–∏–µ–Ω—Ç–∞ (—Ä—É—á–∫–∏ myHandler) –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!!!)

type Env struct {
	db Database
}

func (e *Env) myHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// You can (–≤—ã –º–æ–∂–µ—Ç–µ) now use e.db in your handler
		user := e.db.GetUser() // Example function call
		fmt.Fprintf(w, "User Details: %+v", user)
	}
}

//*// Method 1: Using Closure

func main() {
	//**// Method 1: Using Closure
	env := &Env{
		db: InitializeDatabase(),
	}
	http.HandleFunc("/endpoint", env.myHandler())
	//*// Method 1: Using Closure
	//
	//**// Method 2
	logger := NewLogger()
	app := &App{
		Logger: logger,
	}
	// –ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	// http.Handle –≤–º–µ—Å—Ç–æ http.HandleFunc (—Ç–∏–ø HandlerFunc ‚Äî —ç—Ç–æ –∞–¥–∞–ø—Ç–µ—Ä,
	//  –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä—É—á–µ–∫). –Ø—Å–Ω–µ–µ –Ω–µ —Å—Ç–∞–ª–æ..
	http.Handle("/", app)
	//*// Method 2

	// –û–±—â–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∞
	http.ListenAndServe(":8080", nil)
}

// Each method has its use cases and choosing the right one depends on your specific requirements.
// –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –∏ –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.
// For long-lived dependencies like database connections or configuration data,
// using closures or struct methods is typically preferred.
// –î–ª—è –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏,
// –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä—É–∫—Ç—É—Ä.

// For request-scoped data, leveraging the context package can be more appropriate.
// –î–ª—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞, –±–æ–ª–µ–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã–º –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ context.
