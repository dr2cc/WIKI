package main

import (
	"database/sql"
	"fmt"
	"log/slog"
	"net/http"
	"os"

	_ "github.com/mattn/go-sqlite3"
)

// **// Method 2: (using http.Handler) Structs Implementing http.Handler
// Another approach is defining a struct that includes the dependencies as fields
// and then implementing the ServeHTTP method on this struct.
// –î—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ (=–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏) —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,
// –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
// (–¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø –∏–ª–∏ –µ–≥–æ –ø–æ–ª—è!),
// –∞ –∑–∞—Ç–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞ ServeHTTP –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
// ServeHTTP —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Handler.
// üìå

// –õ—é–±–æ–π —Ç–∏–ø, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –º–µ—Ç–æ–¥ ServeHTTP(ResponseWriter, *Request),
// —Å—á–∏—Ç–∞–µ—Ç—Å—è http.Handler
type app struct {
	logger *slog.Logger
}

// –í–æ–æ–±—â–µ (–ø–æ–∫–∞ —Å–ø–æ—Ä–Ω–æ):
// —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–ª–∞—Å—å —Ä—É—á–∫–æ–π (handler), –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ ServeHTTP()
// —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π:
// ServeHTTP(w http.ResponseWriter, r *http.Request)
//
// –ê –≤–æ—Ç —ç—Ç–æ —Ç–æ—á–Ω–æ.
// http.Handler:
// –≠—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω –º–µ—Ç–æ–¥: ServeHTTP(ResponseWriter, *Request).
// –õ—é–±–æ–π —Ç–∏–ø, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —ç—Ç–æ—Ç (ServeHTTP) –º–µ—Ç–æ–¥, —Å—á–∏—Ç–∞–µ—Ç—Å—è http.Handler.
func (app *app) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// // Log —É slog —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥..
	//app.Logger.Log("Received a request")
	app.logger.Info("Method 2 processed. Received a request")
	fmt.Fprintln(w, "Method 2 processed. Request logged(–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω) successfully(—É—Å–ø–µ—à–Ω–æ)")
}

// –î–æ–≤–æ–∂—É –¥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
// –ü–æ —à–∞–±–ª–æ–Ω—É —Å—Ç–∞—Ç—å–∏ —Å–æ–∑–¥–∞—é –∑–¥–µ—Å—å —ç–∫–∑–µ–º–ø–ª—è—Ä (–æ–±—ä–µ–∫—Ç) –ª–æ–≥–≥–µ—Ä–∞ (slog)
func newLogger() *slog.Logger {
	// —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª —É –¢—É–∑–æ–≤–∞, –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≥–¥–µ –∑–Ω–∞—á–∏—Ç
	// –í—Ä–æ–¥–µ –∫–∞–∫ os.Stdout —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ (–¥–∞–∂–µ —Ç–æ–ª–∫–æ–º –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ)
	return slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelInfo}))
}

//*// Method 2

//**// Method 1: Using Closure
// to Capture External Variables
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è (–∞ –ø–æ —Å—É—Ç–∏ —Ä—É—á–∫—É –¥–µ–ª–∞–µ–º –º–µ—Ç–æ–¥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Env)
// –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
// (—Å–µ—Ä–≤–∏—Å Env —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é ‚ùó"—Å–æ—Å—Ç–æ—è–Ω–∏—è"‚ùó –∫–ª–∏–µ–Ω—Ç–∞ (—Ä—É—á–∫–∏ myHandler) –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!!!)

type env struct {
	db *sql.DB
}

// –ü–µ—Ä–µ–¥–µ–ª–∞–ª –≤ ServeHTTP
func (e *env) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	err := e.db.Ping()
	if err != nil {
		panic(err)
		// fmt.Fprintf(w, "Ping db details: %+v", err)
		// return
	}

	fmt.Fprintf(w, "Ping db details: %+v", "Method 1 processed!")
}

// func (e *env) myHandler() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// You can (–≤—ã –º–æ–∂–µ—Ç–µ) now use e.db in your handler
// 		err := e.db.Ping() // Example function call
// 		if err != nil {
// 			fmt.Fprintf(w, "Ping db details: %+v", err)
// 			return
// 		}

// 		fmt.Fprintf(w, "Ping db details: %+v", "OK")
// 	}
// }

// –î–æ–≤–æ–∂—É –¥–æ —Ä–∞–±–æ—á–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
// –ü–æ —à–∞–±–ª–æ–Ω—É —Å—Ç–∞—Ç—å–∏ —Å–æ–∑–¥–∞—é –∑–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ sqlite
func initializeDatabase() *sql.DB {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	db, err := sql.Open("sqlite3", "./storage.db")
	if err != nil {
		return nil
	}
	return db
}

//*// Method 1: Using Closure

func main() {
	// ‚ùóC—É—Ç—å –º–µ—Ç–æ–¥–æ–≤ 1 –∏ 2‚ùó
	// –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ServeHTTP –∫–∞–∫ –º–µ—Ç–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	// (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ http.Handler –∏ http.HandlerFunc)
	// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ("—Ä—É—á–∫–∞") –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –µ–µ –ø–æ–ª—è–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è —Å http –∑–∞–ø—Ä–æ—Å–æ–º,
	// –Ω–æ –∏ —Å "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏" - –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ db, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—É –∏ —Ç.–¥..
	// –í—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —á–∞—Å—Ç—å—é "—Å–æ—Å—Ç–æ—è–Ω–∏—è" —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

	//**// Method 1

	env := &env{
		db: initializeDatabase(),
	}

	// –º–æ–π
	http.Handle("/endpoint", env)
	// // –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
	// http.HandleFunc("/endpoint", env.myHandler())
	//*// Method 1

	//**// Method 2
	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç slog
	logger := newLogger()
	app := &app{
		logger: logger,
	}

	http.Handle("/", app)
	//*// Method 2

	// –û–±—â–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∞
	http.ListenAndServe("localhost:8080", nil)
}

// Each method has its use cases and choosing the right one depends on your specific requirements.
// –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –∏ –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.
// For long-lived dependencies like database connections or configuration data,
// using closures or struct methods is typically preferred.
// –î–ª—è –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏,
// –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä—É–∫—Ç—É—Ä.

// For request-scoped data, leveraging the context package can be more appropriate.
// –î–ª—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞, –±–æ–ª–µ–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã–º –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ context.
